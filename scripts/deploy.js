const { ethers, network } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
    try {
        console.log(`Deploying to network: ${network.name}`);

        if (network.name === "localhost") {
            // 1. Get the contract factory
            const ResourceAllocation = await ethers.getContractFactory("ResourceAllocation");
            console.log("Contract factory created");

            // 2. Deploy the contract
            const resourceAllocation = await ResourceAllocation.deploy();
            // await resourceAllocation.deployed(); // 移除这一行

            console.log("Contract deployed to:", resourceAllocation.address);

            // 添加一个小的延迟 (例如 500 毫秒)
            await new Promise(resolve => setTimeout(resolve, 500));

            // 3. Get the contract address and ABI
            const contractAddress = resourceAllocation.address;
            const artifact = await hre.artifacts.readArtifact("ResourceAllocation");
            const abi = artifact.abi;

            // 4. Prepare content for frontend config file
            const contractsFileContent = `
                // This file is auto-generated by the deployment script, do not modify manually
                export const CONTRACT_ABI = ${JSON.stringify(abi, null, 2)};
                export const CONTRACT_ADDRESS = '${contractAddress}';
            `;

            // 5. Define the path for the frontend config file
            const contractsFilePath = path.join(__dirname, '..', 'frontend', 'src', 'contracts.js');
            console.log("Writing config to:", contractsFilePath);

            // 6. Write ABI and address to the file
            fs.writeFileSync(contractsFilePath, contractsFileContent);
            console.log(`ABI and contract address written to ${contractsFilePath}`);
        } else {
            console.log(`Skipping deployment: Target network is not localhost (${network.name})`);
        }

    } catch (error) {
        console.error("Error during deployment:", error);
        process.exit(1);
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });